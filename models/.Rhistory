vecchia_likelihood(z,NNGP,covparms,nuggets)
vecchia_likelihood(z, vecchia_specify(locs, m), covparms, nuggets)
dmvnorm(z,mean=rep(0,n),sigma=Om0,log=TRUE)
# simulate latent process
y=as.numeric(t(chol(Om0))%*%rnorm(n))
data.model = "logistic"
# simulate data
if(data.model=='poisson'){
z = rpois(n, exp(y))
} else if(data.model=='logistic'){
z = rbinom(n,1,prob = exp(y)/(1+exp(y)))
} else if(data.model=='gamma'){
z = rgamma(n, shape = default_lh_params$alpha, rate = default_lh_params$alpha*exp(-y))
}else{
print('Error: Distribution not implemented yet.')
}
# plot simulated data, 1 or 2D
defpar = par(mfrow=c(1,2))
if(spatial.dim==1) {
plot(locs,y, main = "latent")
plot(locs,z, main = "observed")
} else {
fields::quilt.plot(locs,y, main = "Latent")
fields::quilt.plot(locs,z, main = "Observed")
}
par(defpar)
m=10
if(spatial.dim==1){
vecchia.approx=vecchia_specify(locs,m) #IW ordering
} else {
vecchia.approx=vecchia_specify(locs,m,cond.yz='zy') #RF ordering
}
posterior = calculate_posterior_VL(z,vecchia.approx,likelihood_model=data.model,
covparms = covparms)
if (spatial.dim==1){
par(mfrow=c(1,1))
ord = order(locs) # order so that lines appear correctly
y_limits = c(min(y, posterior$mean[ord]), max(y, posterior$mean[ord]))
plot(locs[ord], y[ord], type = "l", ylim = y_limits )
lines(locs[ord], posterior$mean[ord], type = "l", col=3, lwd=3)
legend("bottomright", legend = c("Latent", "VL"), col= c(1,3), lwd=c(1,3))
} else if (spatial.dim==2){
dfpar = par(mfrow=c(1,2))
# ordering unnecessary; we are using a scatter plot rather than lines
quilt.plot(locs, y, main= "Truth")
quilt.plot(locs, posterior$mean,  main= "VL m=10")
par(defpar)
}
######  specify prediction locations   #######
n.p=30^2
if(spatial.dim==1){  #  1-D case
locs.pred=matrix(seq(0,1,length=n.p),ncol=1)
} else {   # 2-D case
grid.oneside=seq(0,1,length=round(sqrt(n.p)))
locs.pred=as.matrix(expand.grid(grid.oneside,grid.oneside)) # grid of pred.locs
}
n.p=nrow(locs.pred)
######  specify Vecchia approximation   #######
vecchia.approx.pred = vecchia_specify(locs, m=10, locs.pred=locs.pred)
###  carry out prediction
preds = vecchia_laplace_prediction(posterior, vecchia.approx.pred, covparms)
# plotting predicitions
if (spatial.dim==1){
defpar = par(mfrow=c(1,1))
ord = order(locs) # order so that lines appear correctly
plot(locs[ord], y[ord], type = "l", xlim=c(0,1.2), ylim = c(-1,3))
lines(locs, posterior$mean, type = "p", col=4, lwd=3, lty=1)
lines(locs.pred, preds$mu.pred, type = "l", col=3, lwd=3, lty=1)
lines(locs.pred,preds$mu.pred+sqrt(preds$var.pred), type = "l", lty = 3, col=3)
lines(locs.pred,preds$mu.pred-sqrt(preds$var.pred), type = "l", lty = 3, col=3)
legend("topleft", legend = c("Latent", "VL: Pred", "VL: 1 stdev"),
col= c(1,3,3), lwd=c(1,2,1), lty = c(1,1,3))
par(defpar)
} else if (spatial.dim==2){
defpar =  par(mfrow=c(1,2))
# ordering unnecessary; we are using a scatter plot rather than lines
quilt.plot(locs, y, main= "True Latent",
xlim = c(0,1), ylim = c(0,1), nx=64, ny=64)
quilt.plot(locs.pred, preds$mu.pred,  main= "VL Prediction",nx = 30, ny=30)
par(defpar)
}
vecchia_laplace_likelihood(z,vecchia.approx,likelihood_model=data.model,covparms = covparms)
vecchia.approx
source('~/GPvecchia/GPvecchia/vignettes/GPvecchia_vignette.R')
rm(list=ls())
## ----setup, include = FALSE----------------------------------------------
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.dim=c(7,5)
)
## ------------------------------------------------------------------------
library(GPvecchia)
library(Matrix)
library(fields)
## ------------------------------------------------------------------------
set.seed(1988)
spatial.dim=2
n=50
if(spatial.dim==1){
locs=matrix(runif(n),ncol=1)
} else {
locs <- cbind(runif(n),runif(n))
}
## ------------------------------------------------------------------------
beta=2
sig2=1; range=.1; smooth=1.5
covparms =c(sig2,range,smooth)
covfun <- function(locs) sig2*MaternFun(fields::rdist(locs),covparms)
nuggets=rep(.1,n)
## ----fig4, out.width = '400px'-------------------------------------------
Om0 <- covfun(locs)+diag(nuggets)
z=as.numeric(t(chol(Om0))%*%rnorm(n))
data=z+beta
# plot simulated data
if(spatial.dim==1) {
plot(locs,data)
} else {
fields::quilt.plot(locs,data, nx=n, ny=n)
}
## ------------------------------------------------------------------------
n.p=100
if(spatial.dim==1){  #  1-D case
locs.pred=matrix(seq(0,1,length=n.p),ncol=1)
} else {   # 2-D case
grid.oneside=seq(0,1,length=round(sqrt(n.p)))
locs.pred=as.matrix(expand.grid(grid.oneside,grid.oneside)) # grid of pred.locs
}
n.p=nrow(locs.pred)
preds=vecchia_pred(vecchia.est,locs.pred)
devtools::document()
devtools::build_vignettes()
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
N
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
E
x[[t-1]]
x
t
x[[1]]
x[[t-1]]
E(x[[t-1]])
E
QQ
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
Qc
dim(Qc)
x0
locs
q
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
library(GPvecchia)
getMatCov
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
for(t in 2:Tmax){
zrange = range(c(predsE[[t]][["state"]], predsVL[[t]][["state"]], unlist(lapply(XY$x, function(t) range(t, na.rm=TRUE))), unlist(lapply(XY$y, function(t) range(t, na.rm=TRUE)))))
defpar = par(mfrow=c(2, 2), oma=c(0, 0, 2, 0))
nna.obs = which(!is.na(XY$y[[t]]))
plot( locs[nna.obs,], XY$y[[t]][nna.obs], main="data")#,zlim=zrange, nx=sqrt(n), ny=sqrt(n) )
plot( locs, as.numeric(XY$x[[t]]), main="latent")#, zlim=zrange, nx=sqrt(n), ny=sqrt(n) )
plot( locs, predsVL[[t]]$state, main="Vecchia pred.")#, zlim=zrange, nx=sqrt(n), ny=sqrt(n) )
#fields::quilt.plot( locs, predsE[[t]]$state, main="exact pred.", zlim=zrange, nx=sqrt(n), ny=sqrt(n) )
mtext(paste("t=", t, sep=""), outer = TRUE, cex = 1.5)
par(defpar)
}
########## plot results ##########
for(t in 2:Tmax){
zrange = range(c(predsVL[[t]][["state"]], unlist(lapply(XY$x, function(t) range(t, na.rm=TRUE))), unlist(lapply(XY$y, function(t) range(t, na.rm=TRUE)))))
#zrange = range(c(predsE[[t]][["state"]], predsVL[[t]][["state"]], unlist(lapply(XY$x, function(t) range(t, na.rm=TRUE))), unlist(lapply(XY$y, function(t) range(t, na.rm=TRUE)))))
defpar = par(mfrow=c(2, 2), oma=c(0, 0, 2, 0))
nna.obs = which(!is.na(XY$y[[t]]))
plot( locs[nna.obs,], XY$y[[t]][nna.obs], main="data")#,zlim=zrange, nx=sqrt(n), ny=sqrt(n) )
plot( locs, as.numeric(XY$x[[t]]), main="latent")#, zlim=zrange, nx=sqrt(n), ny=sqrt(n) )
plot( locs, predsVL[[t]]$state, main="Vecchia pred.")#, zlim=zrange, nx=sqrt(n), ny=sqrt(n) )
#fields::quilt.plot( locs, predsE[[t]]$state, main="exact pred.", zlim=zrange, nx=sqrt(n), ny=sqrt(n) )
mtext(paste("t=", t, sep=""), outer = TRUE, cex = 1.5)
par(defpar)
}
source('~/HVLF/test-lorenz.r')
########## plot results ##########
for(t in 2:Tmax){
zrange = range(c(predsVL[[t]][["state"]], unlist(lapply(XY$x, function(t) range(t, na.rm=TRUE))), unlist(lapply(XY$y, function(t) range(t, na.rm=TRUE)))))
#zrange = range(c(predsE[[t]][["state"]], predsVL[[t]][["state"]], unlist(lapply(XY$x, function(t) range(t, na.rm=TRUE))), unlist(lapply(XY$y, function(t) range(t, na.rm=TRUE)))))
defpar = par(mfrow=c(2, 2), oma=c(0, 0, 2, 0))
nna.obs = which(!is.na(XY$y[[t]]))
plot( locs[nna.obs,], XY$y[[t]][nna.obs], main="data", type="l")#,zlim=zrange, nx=sqrt(n), ny=sqrt(n) )
plot( locs, as.numeric(XY$x[[t]]), main="latent", pch=16)#, zlim=zrange, nx=sqrt(n), ny=sqrt(n) )
plot( locs, predsVL[[t]]$state, main="Vecchia pred.", pch=16)#, zlim=zrange, nx=sqrt(n), ny=sqrt(n) )
#fields::quilt.plot( locs, predsE[[t]]$state, main="exact pred.", zlim=zrange, nx=sqrt(n), ny=sqrt(n) )
mtext(paste("t=", t, sep=""), outer = TRUE, cex = 1.5)
par(defpar)
}
########## plot results ##########
for(t in 2:Tmax){
zrange = range(c(predsVL[[t]][["state"]], unlist(lapply(XY$x, function(t) range(t, na.rm=TRUE))), unlist(lapply(XY$y, function(t) range(t, na.rm=TRUE)))))
#zrange = range(c(predsE[[t]][["state"]], predsVL[[t]][["state"]], unlist(lapply(XY$x, function(t) range(t, na.rm=TRUE))), unlist(lapply(XY$y, function(t) range(t, na.rm=TRUE)))))
defpar = par(mfrow=c(2, 2), oma=c(0, 0, 2, 0))
nna.obs = which(!is.na(XY$y[[t]]))
plot( locs[nna.obs,], XY$y[[t]][nna.obs], main="data", type="l")#,zlim=zrange, nx=sqrt(n), ny=sqrt(n) )
lines( locs, as.numeric(XY$x[[t]]), main="latent", type="l")#, zlim=zrange, nx=sqrt(n), ny=sqrt(n) )
lines( locs, predsVL[[t]]$state, main="Vecchia pred.", type="l")#, zlim=zrange, nx=sqrt(n), ny=sqrt(n) )
#fields::quilt.plot( locs, predsE[[t]]$state, main="exact pred.", zlim=zrange, nx=sqrt(n), ny=sqrt(n) )
mtext(paste("t=", t, sep=""), outer = TRUE, cex = 1.5)
par(defpar)
}
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
E
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
E
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
source('~/HVLF/test-lorenz.r')
devtools::install_github("katzfuss-group/GPvecchia")
source('~/HVLF/test-adv-diff.r')
source('~/GPvecchia/GPvecchia/tests/testthat/test-Gaussian-filter.r')
devtools::test_file("test-Gaussian-filter.r")
devtools::test_file("test-Gaussian-filter.r")
devtools::test_file("test-Gaussian-filter.r")
devtools::test_file("test-Gaussian-filter.r")
devtools::test_file("test-Gaussian-filter.r")
devtools::test_file("test-Gaussian-filter.r")
devtools::test_file("test-Gaussian-filter.r")
devtools::test_file("test-Gaussian-filter.r")
devtools::test_file("test-Gaussian-filter.r")
devtools::test_file("test-Gaussian-filter.r")
devtools::test_file("test-Gaussian-filter.r")
source('~/HVLF/plots.r')
install.packages("numDeriv")
source('~/HVLF/test-num-deriv.r')
source('~/HVLF/test-num-deriv.r')
J
x
cos(x)
x
func2(x)
?jacobian
source('~/HVLF/test-num-deriv.r')
J
x
jacobian(func2, x)
x
source('~/HVLF/test-num-deriv.r')
J
source('~/HVLF/test-num-deriv.r')
source('~/HVLF/test-num-deriv.r')
J
source('~/HVLF/test-num-deriv.r')
J
source('~/HVLF/test-num-deriv.r')
source('~/HVLF/test-num-deriv.r')
source('~/HVLF/test-num-deriv.r')
source('~/HVLF/test-num-deriv.r')
source('~/HVLF/test-num-deriv.r')
source('~/HVLF/test-num-deriv.r')
source('~/HVLF/test-num-deriv.r')
x
2*pi
cos(x)
f(x)
f(x[1])
fp(x)
source('~/HVLF/test-num-deriv.r')
fp(x)
fp(x(1))
fp(x[1])
fp(x[2])
f(pi/2)
devtools::install_github("wboyles/VEnKF", build = TRUE, build_opts = c("--no-resave-data", "--no-manual"))
devtools::build_vignettes("VEnKF")
devtools::build_vignettes(VEnKF)
library(VEnKF)
devtools::build_vignettes(VEnKF)
help("VEnKF-package")
version
devtools::build_vignettes("~/R/x86_64-pc-linux-gnu-library/3.4/VEnKF")
vignette(VEnKF)
vignette("VEnKF")
browseVignettes("VEnKF")
devtools::install_github("wboyles/VEnKF")
devtools::install_github("wboyles/VEnKF", build=TRUE)
devtools::install_github("wboyles/VEnKF", build=TRUE, force=TRUE)
browseVignettes("VEnKF")
browseVignettes(VEnKF)
browseVignettes("VEnKF")
devtools::build_vignettes("~/R/x86_64-pc-linux-gnu-library/3.4/VEnKF")
devtools::build_vignettes("~/R/x86_64-pc-linux-gnu-library/3.4/VEnKF")
source('~/HVLF/models/sim.r')
m
M
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
DeltaLorenz04M2Cpp
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
m
M
X1
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
X1
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
X1_5
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
X1 - X2
source('~/HVLF/models/sim.r')
X0
rm(list=ls())
library(VEnKF)
library(rootSolve)
N = 40
Force = 8
dt = 0.005
M = 40
K = 1
Tmax = 5
set.seed(1988)
X0 = rnorm(N)
X0
X1 = Lorenz04M2Sim(X0, Force, K, dt, M, iter=1, burn=0)
X0
X1
X2 = Lorenz04M2Sim(as.numeric(X1), Force, K, dt, M, iter=1, burn=0)
Xcomp = Lorenz04M2Sim(X0, Force, K, dt, M, iter=2, burn=0)
Xcomp[,2]
Xcomp
Xcomp[,2]
X2
as.numeric(X2)
as.numeric(X1)
as.numeric(X0)
source('~/HVLF/models/sim.r')
X2
X2[,2]
Xcomp[,3]
Xcomp
X1
source('~/HVLF/models/sim.r')
X2
Xcomp
source('~/HVLF/models/sim.r')
X1
X2
Xcomp
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
X1
source('~/HVLF/models/sim.r')
X1
source('~/HVLF/models/sim.r')
X1
source('~/HVLF/models/sim.r')
X1
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
X1
source('~/HVLF/models/sim.r')
X1
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
X1
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
X1
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
X1
X1
source('~/HVLF/models/sim.r')
X1
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
X1
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
int(5/2)
round(5/2)
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
X2
X1
source('~/HVLF/models/sim.r')
E
eigen(E)
help(eigen)
eigen(E, only.values = TRUE)
abs(eigen(E, only.values = TRUE))
abs(eigen(E, only.values = TRUE)$values)
const
mean(X0)
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
source('~/HVLF/models/sim.r')
